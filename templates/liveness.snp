<h1 id="intro">Combining Liveness and Autonomy</h1>
<p><span>
MicroBlocks provides the liveness of a tethered blocks programming system such as
<a href="http://snap4arduino.rocks" target="_blank">Snap4Arduino</a>,
making it easy to get started, encouraging experimentation, and fostering deep engagement.
MicroBlocks compiles and downloads your scripts as you work, so you never have to wait.
You can even change a script while it is running and see the effect immediately.
</span></p>

<p><span>
Unlike tethered systems, MicroBlocks code runs on the microcontroller, not the host computer.
This autonomy allows MicroBlocks to do things that require precise timing, such as generating
music by toggling a pin or decoding the signal from a television remote control.
Tethered systems are unable to do those things because the latency and jitter of
the USB serial connection makes such precise timing impossible.
</span></p>

<p><span>
Because MicroBlocks is not dependent on the host computer for execution,
the program continues to run when the microcontroller is untethered and powered by a battery.
That supports applications like animated costumes, self-contained
art projects, interactive signs, pocket games, and remote data collection.
For example, you might use MicroBlocks to record the G-forces in a model rocket.
</span></p>

<p><span>
In the past, users had to choose between tethered and compilation-based programming systems.
Tethered systems provide liveness but cannot do precise timing and are forever dependent on their host computer.
Compilation-based systems provide precise timing and autonomous operation,
but require a tedious wait after every code change for the program to compile and download.
</span></p>

<p><span>
MicroBlocks combines the liveness of a tethered system
with autonomous program execution on the microcontroller.
With MicroBlocks, you no longer need to choose; you can have the best of both worlds!
</span></p>
